package pixi.render;

import js.lib.Uint16Array;
import pixi.display.DisplayObject;
import pixi.display.Graphics.BatchDrawCall;
import pixi.display.Sprite;
import pixi.filters.Shader;
import pixi.render.systems.BatchSystem.BatchTextureArray;
import pixi.utils.ViewableBuffer;

/**
 * Renderer dedicated to drawing and batching sprites.
 * 
 * This is the default batch renderer. It buffers objects with texture-based geometries
 * and renders them in batches. It uploads multiple textures to the GPU to reduce to the
 * number of draw calls.
 * 
 * @see Documentation: http://pixijs.download/release/docs/PIXI.AbstractBatchRenderer.html
 * @see Source code: http://pixijs.download/release/docs/packages_core_src_batch_AbstractBatchRenderer.js.html
 * ***
 * Library: **core** 
 */
@:native("PIXI.AbstractBatchRenderer")
extern class AbstractBatchRenderer extends ObjectRenderer
{
    /**
     * This will hook onto the renderer's `contextChange` and `prerender` signals.
     * @param renderer The renderer this works for.
     */
    private function new(renderer:Renderer);

    /**
     * Pool of `BatchDrawCall` objects that `flush` used to create "batches" of the
     * objects being rendered.
     * 
     * These are never re-allocated again. Shared between all batch renderers
     * because it can be only one "flush" working at the moment.
     */
    public static var _drawCallPool:Array<BatchDrawCall>;

    /**
     * Pool of `BatchDrawCall` objects that `flush` used to create "batches" of
     * the objects being rendered.
     * 
     * These are never re-allocated again. Shared between all batch renderers
     * because it can be only one "flush" working at the moment.
     */
    public static var _textureArrayPool:Array<BatchTextureArray>;

    /**
     * This shader is generated by `this.shaderGenerator`.
     * 
     * It is generated specifically to handle the required number of textures
     * being batched together.
     */
    private var _shader:Shader;

    /**
     * The class that represents the geometry of objects that are going to be
     * batched with this.  
     * Default: `pixi.utils.BatchGeometry`
     */
    private var geometryClass:Dynamic;

    /**
     * Maximum number of textures that can be uploaded to the GPU under the
     * current context. It is initialized properly in `this.contextChange`.
     * @see [PIXI.AbstractBatchRenderer#contextChange](http://pixijs.download/release/docs/PIXI.AbstractBatchRenderer.html#contextChange)
     */
    public var MAX_TEXTURES(default, null):Int;

    /**
     * This is used to generate a shader that can color each vertex based on
     * a `aTextureId` attribute that points to an texture in `uSampler`.
     * 
     * This enables the objects with different textures to be drawn in the
     * same draw call.
     * 
     * You can customize your shader by creating your custom shader generator.
     */
    private var shaderGenerator:BatchShaderGenerator;

    /**
     * The number of bufferable objects before a flush occurs automatically.  
     * Default: `pixi.Settings.SPRITE_BATCH_SIZE * 4`
     */
    public var size:Int;

    /**
     * The WebGL state in which this renderer will work.
     */
    public var state(default, null):State;
    
    /**
     * Size of data being buffered per vertex in the attribute buffers (in floats).
     * By default, the batch-renderer plugin uses 6:
     * 
     * |aVertexPosition|2|
     * |:-|:-|
     * |aTextureCoords|2|
     * |aColor|1|
     * |aTextureId|1|
     */
    public var vertexSize(default, null):Float;

    /**
     * Bind textures for current rendering.
     * @param texArray BatchTextureArray.
     */
    public function bindAndClearTexArray(texArray:BatchTextureArray):Void;

    /**
     * Populating drawcalls for rendering.
     * @param texArray BatchTextureArray.
     * @param start Int.
     * @param finish Int.
     */
    public function buildDrawCalls(texArray:BatchTextureArray, start:Int, finish:Int):Void;

    /**
     * Handles the `contextChange` signal.
     * 
     * It calculates `this.MAX_TEXTURES` and allocating the packed-geometry object pool.
     */
    public function contextChange():Void;

    /**
     * Destroys this `AbstractBatchRenderer`. It cannot be used again.
     */
    override public function destroy():Void;

    /**
     * Renders the content now and empties the current batch.
     */
    override public function flush():Void;

    /**
     * Makes sure that static and dynamic flush pooled objects have correct dimensions.
     */
    public function initFlushBuffers():Void;

    /**
     * Handles the `prerender` signal.
     * 
     * It ensures that flushes start from the first geometry object again.
     */
    public function onPrerender():Void;

    /**
     * Takes the four batching parameters of `element`, interleaves and pushes them
     * into the batching attribute/index buffers given.
     * 
     * It uses these properties: `vertexData uvs`, `textureId` and `indicies`. It also
     * uses the "tint" of the base-texture, if present.
     * 
     * @param element Element being rendered.
     * @param attributeBuffer Attribute buffer.
     * @param indexBuffer Index buffer.
     * @param aIndex Number of floats already in the attribute buffer.
     * @param iIndex Number of indices already in indexBuffer.
     */
    public function packInterleavedGeometry(    element:Sprite,
                                                attributeBuffer:ViewableBuffer,
                                                indexBuffer:Uint16Array,
                                                aIndex:Int,
                                                iIndex:Int
    ):Void;

    /**
     * Buffers the "batchable" object. It need not be rendered immediately.
     * @param element The element to render when using this renderer.
     */
    override public function render(element:DisplayObject):Void;

    /**
     * Starts a new sprite batch.
     */
    override public function start():Void;

    /**
     * Stops and flushes the current batch.
     */
    override public function stop():Void;
}

/**
 * Helper that generates batching multi-texture shader. Use it with your new BatchRenderer.
 * @see Documentation: http://pixijs.download/release/docs/PIXI.BatchShaderGenerator.html
 * @see Source code: http://pixijs.download/release/docs/packages_core_src_batch_BatchShaderGenerator.js.html
 * ***
 * Library: **core** 
 */
@:native("PIXI.BatchShaderGenerator")
extern class BatchShaderGenerator extends ObjectRenderer
{
    /**
     * Create a new BatchShaderGenerator instance.
     * @param vertexSrc Vertex shader.
     * @param fragTemplate Fragment shader template.
     */
    public function new(vertexSrc:String, fragTemplate:String);

    /**
     * Reference to the fragement shader template. Must contain "%count%" and "%forloop%".
     */
    public var fragTemplate:String;

    /**
     * Reference to the vertex shader source.
     */
    public var vertexSrc:String;
}