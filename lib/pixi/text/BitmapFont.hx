package pixi.text;

import haxe.DynamicAccess;
import haxe.extern.EitherType;
import js.html.XMLDocument;
import pixi.textures.Texture;

/**
 * BitmapFont represents a typeface available for use with the BitmapText class.
 * Use the install method for adding a font to be used.
 * @see Documentation: http://pixijs.download/release/docs/PIXI.BitmapFont.html
 * @see Source code: http://pixijs.download/release/docs/packages_text-bitmap_src_BitmapFont.js.html
 * ***
 * Library: **core** 
 */
@:native("PIXI.BitmapFont")
extern class BitmapFont
{
    /**
     * Create a new BitmapFont instance.
     */
    public function new(data:BitmapFontData, textures:EitherType<Texture,DynamicAccess<Texture>>);

    /**
     * This character set includes all the letters in the alphabet (both lower- and upper- case).
     * 
     * Example:
     * ```
     * BitmapFont.from("ExampleFont", style, { chars: BitmapFont.ALPHA })
     * ```
     */
    static public var ALPHA(default, null):Array<Array<String>>;

    /**
     * This character set is the union of `BitmapFont.ALPHA` and `BitmapFont.NUMERIC`.
     */
    static public var ALPHANUMERIC(default, null):Array<Array<String>>;

    /**
     * This character set consists of all the ASCII table.
     * @see http://www.asciitable.com/
     */
    static public var ASCII(default, null):Array<Array<String>>;

    /**
     * Collection of available/installed fonts.
     */
    static public var available(default, null):DynamicAccess<BitmapFont>;

    /**
     * Collection of default options when using `BitmapFont.from()`.
     */
    static public var defaultOptions(default, null):IBitmapFontOptions;

    /**
     * This character set includes all decimal digits (from 0 to 9).
     * 
     * Example:
     * ```
     * BitmapFont.from("ExampleFont", style, { chars: BitmapFont.NUMERIC })
     * ```
     */
    static public var NUMERIC(default, null):Array<Array<String>>;

    /**
     * The map of characters by character code.
     */
    public var chars(default, null):Dynamic;

    /**
     * The name of the font face.
     */
    public var font(default, null):String;

    /**
     * The line-height of the font face in pixels.
     */
    public var lineHeight(default, null):Float;

    /**
     * The size of the font face in pixels.
     */
    public var size(default, null):Float;

    /**
     * Generates a bitmap-font for the given style and character set. This does
     * not support kernings yet. With `style` properties, only the following
     * non-layout properties are used:
     * - [dropShadow](http://pixijs.download/release/docs/PIXI.TextStyle.html#dropShadow)
     * - [dropShadowDistance](http://pixijs.download/release/docs/PIXI.TextStyle.html#dropShadowDistance)
     * - [dropShadowColor](http://pixijs.download/release/docs/PIXI.TextStyle.html#dropShadowColor)
     * - [dropShadowBlur](http://pixijs.download/release/docs/PIXI.TextStyle.html#dropShadowBlur)
     * - [dropShadowAngle](http://pixijs.download/release/docs/PIXI.TextStyle.html#dropShadowAngle)
     * - [fill](http://pixijs.download/release/docs/PIXI.TextStyle.html#fill)
     * - [fillGradientStops](http://pixijs.download/release/docs/PIXI.TextStyle.html#fillGradientStops)
     * - [fillGradientType](http://pixijs.download/release/docs/PIXI.TextStyle.html#fillGradientType)
     * - [fontFamily](http://pixijs.download/release/docs/PIXI.TextStyle.html#fontFamily)
     * - [fontSize](http://pixijs.download/release/docs/PIXI.TextStyle.html#fontSize)
     * - [fontVariant](http://pixijs.download/release/docs/PIXI.TextStyle.html#fontVariant)
     * - [fontWeight](http://pixijs.download/release/docs/PIXI.TextStyle.html#fontWeight)
     * - [lineJoin](http://pixijs.download/release/docs/PIXI.TextStyle.html#lineJoin)
     * - [miterLimit](http://pixijs.download/release/docs/PIXI.TextStyle.html#miterLimit)
     * - [stroke](http://pixijs.download/release/docs/PIXI.TextStyle.html#stroke)
     * - [strokeThickness](http://pixijs.download/release/docs/PIXI.TextStyle.html#strokeThickness)
     * - [textBaseline](http://pixijs.download/release/docs/PIXI.TextStyle.html#textBaseline)
     * 
     * Example:
     * ```
     * BitmapFont.from("TitleFont", {
     *     fontFamily: "Arial",
     *     fontSize: 12,
     *     strokeThickness: 2,
     *     fill: "purple"
     * });
     * 
     * var title = new BitmapText("This is the title", { fontName: "TitleFont" });
     * ```
     * 
     * @param name The name of the custom font to use with BitmapText.
     * @param style Style options to render with BitmapFont.
     * @param options Setup options for font or name of the font.
     * @return Font generated by style options.
     */
    static public function from(name:String, ?style:EitherType<Dynamic, TextStyle>, ?options:IBitmapFontOptions):BitmapFont;

    /**
     * Register a new bitmap font.
     * @param data The characters map that could be provided as xml or raw string.
     * @param textures List of textures for each page.
     * @return Result font object with font, size, lineHeight and char fields.
     */
    static public function install(data:EitherType<XMLDocument, EitherType<String, BitmapFontData>>, textures:EitherType<Texture, EitherType<Array<Texture>, DynamicAccess<Texture>>>):BitmapFont;

    /**
     * Remove bitmap font by name.
     */
    static public function uninstall(name:String):Void;

    /**
     * Remove references to created glyph textures.
     */
    public function destroy():Void;
}

/**
 * @see http://pixijs.download/release/docs/PIXI.IBitmapFontOptions.html
 * ***
 * Library: **core** 
 */
typedef IBitmapFontOptions =
{
    /**
     * characters included in the font set. You can also use ranges.
     * For example, `[['a', 'z'], ['A', 'Z'], "!@#$%^&*()~{}[] "]`.
     * Don't forget to include spaces ' ' in your character set!
     * 
     * Default: `BitmapFont.ALPHANUMERIC`
     */
    @:optional var chars:EitherType<String, EitherType<Array<String>, Array<Array<String>>>>;

    /**
     * Render resolution for glyphs.  
     * Default: `1`
     */
    @:optional var resolution:Float;

    /**
     * Padding between glyphs on texture atlas.  
     * Default: `4`
     */
    @:optional var padding:Float;

    /**
     * Optional width of atlas, smaller values to reduce memory.  
     * Default: `512`
     */
    @:optional var textureWidth:Int;

    /**
     * Optional height of atlas, smaller values to reduce memory.  
     * Default: `512`
     */
    @:optional var textureHeight:Int;
}