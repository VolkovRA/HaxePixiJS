package pixi.core.renderers.webgl;

import js.lib.Uint16Array;
import js.html.webgl.RenderingContext;
import pixi.core.Pixi.BlendModes;
import pixi.core.Pixi.ScaleModes;
import pixi.core.Shader;
import pixi.core.display.DisplayObject;
import pixi.core.display.Transform;
import pixi.core.math.shapes.Rectangle;
import pixi.core.renderers.AbstractRenderer;
import pixi.core.renderers.systems.BatchSystem;
import pixi.core.renderers.systems.ContextSystem;
import pixi.core.renderers.systems.FrameBufferSystem;
import pixi.core.renderers.systems.GeometrySystem;
import pixi.core.renderers.systems.MaskSystem;
import pixi.core.renderers.systems.ProjectionSystem;
import pixi.core.renderers.systems.RenderTextureSystem;
import pixi.core.renderers.systems.ShaderSystem;
import pixi.core.renderers.systems.StateSystem;
import pixi.core.renderers.systems.StencilSystem;
import pixi.core.renderers.systems.TextureGCSystem;
import pixi.core.renderers.systems.TextureSystem;
import pixi.core.renderers.webgl.extract.Extract;
import pixi.core.renderers.webgl.utils.BatchShaderGenerator;
import pixi.core.renderers.webgl.utils.ObjectRenderer;
import pixi.core.renderers.webgl.utils.RenderTarget;
import pixi.core.sprites.Sprite;
import pixi.core.textures.Texture;
import pixi.core.textures.RenderTexture;
import pixi.core.math.Matrix;
import pixi.core.renderers.webgl.managers.MaskManager;
import pixi.core.renderers.systems.FilterSystem;

@:native("PIXI.AbstractBatchRenderer")
extern class AbstractBatchRenderer extends ObjectRenderer {
	/**
	 * Renderer dedicated to drawing and batching sprites.
	 * This is the default batch renderer. It buffers objects with texture-based geometries and renders them
	 * in batches. It uploads multiple textures to the GPU to reduce to the number of draw calls.
	 * @param	renderer The renderer this works for.
	 */
	function new(renderer:Renderer);

	/**
	 * This shader is generated by this.shaderGenerator.
	 * It is generated specifically to handle the required number of textures being batched together.
	 */
	private var _shader:Shader;

	/**
	 * The class that represents the geometry of objects that are going to be batched with this. Default: PIXI.BatchGeometry
	 */
	private var geometryClass:Dynamic;

	/**
	 * Maximum number of textures that can be uploaded to the GPU under the current context. It is initialized properly in this.contextChange.
	 */
	var MAX_TEXTURES(default, null):Int;

	/**
	 *
	 */
	var shaderGenerator:BatchShaderGenerator;

	/**
	 * The number of bufferable objects before a flush occurs automatically.
	 * Default: settings.SPRITE_MAX_TEXTURES
	 */
	var size:Int;

	/**
	 * The WebGL state in which this renderer will work.
	 */
	var state(default, null):State;

	/**
	 * Size of data being buffered per vertex in the attribute buffers (in floats). By default, the batch-renderer plugin uses 6:
	 * aVertexPosition 2
	 * aTextureCoords 2
	 * aColor 1
	 * aTextureId 1
	 */
	var vertexSize(default, null):Int;

	/**
	 * Handles the contextChange signal.
	 * It calculates this.MAX_TEXTURES and allocating the packed-geometry object pool.
	 */
	function contextChange():Void;

	/**
	 * Handles the prerender signal.
	 * It ensures that flushes start from the first geometry object again.
	 */
	function onPrerender():Void;

	/**
	 * Takes the four batching parameters of element, interleaves and pushes them into the batching attribute/index buffers given.
	 * It uses these properties: vertexData uvs, textureId and indicies. It also uses the "tint" of the base-texture, if present.
	 * @param	element
	 * @param	attributeBuffer
	 * @param	indexBuffer
	 * @param	aIndex
	 * @param	iIndex
	 */
	function packInterleavedGeometry(element:Sprite, attributeBuffer:ViewableBuffer, indexBuffer:Uint16Array, aIndex:Int, iIndex:Int):Void;
}
